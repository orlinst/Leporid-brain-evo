setwd("C:/Users/uqotodor_local/Dropbox/05. Github/Leporid-brain-evo")
require(caper)
require(car)
require(plotly)
require(ggplot2)
library(MCMCglmm)
library(mulTree)
require(phytools)
require(forcats)
require(bayesplot)
library(hdrcde)
require(mice)
require(phylomice)
lep.data <-read.table("./Data/lepdata_trimmed2.txt", sep = "\t", header = TRUE)
lep.tree <-read.tree("./Data/leptree.txt")
#convert var types
lep.data$DietBreadth <- as.numeric(lep.data$DietBreadth)
lep.data$Burrow < as.numeric(lep.data$DietBurrow)
lep.data$ECV_T <- log(lep.data$ECV_T)
lep.data$ECV_OB <- log(lep.data$ECV_OB)
lep.data$ECV_ROB <- log(lep.data$ECV_ROB)
lep.data$AdultBodyMass <- log(lep.data$AdultBodyMass)
lep.data$GestationLen <- log(lep.data$GestationLen)
lep.data$HomeRange <- log(lep.data$HomeRange)
lep.data$LitterSize <- log(lep.data$LitterSize)
lep.data$GR_Area <- log(lep.data$GR_Area)
#set row names and check for missingness
rownames(lep.data) <- lep.data$Name_phyl
clean.data(lep.data, lep.tree)  ## check if data == tree names
aggr_plot <- aggr(data_mice, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data_mice), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
library(VIM)
aggr_plot <- aggr(data_mice, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data_mice), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
data_mice <- lep.data
aggr_plot <- aggr(data_mice, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data_mice), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
View(lep.data)
leporid <- comparative.data(phy = leptree, data = lepdata, names.col = Name_phyl, vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
leporid <- comparative.data(phy = lep.tree, data = lep.data, names.col = Name_phyl, vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
View(lep.data)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
summary(model.Se1) # oB but not ROB or T (both absolute and relative work here!)
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + SeP*SeT, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + SeP*SeT, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
anova(model.Se1)
View(lep.data)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + GestationLen, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + GestationLen, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + LitterSize, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + LitterSize, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + GR_Area, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + GR_Area, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass *Burrow, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass *Burrow, data = leporid, lambda='ML')
model.Se1<-pgls(ECV_OB ~ AdultBodyMass * (SeT+SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass * (SeT+SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass * (LitterSize+GestationLen), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass * (LitterSize+GestationLen), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + HomeRange, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + HomeRange, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + GR_Area, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + GR_Area, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass * GR_Area, data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SeT), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_ROB ~ AdultBodyMass + log(SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_ROB ~ AdultBodyMass + log(SeT), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_ROB ~ AdultBodyMass * (log(SeT) + log(SeP)), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass * (log(SeT) + log(SeP)), data = leporid, lambda='ML')
anova(model.Se1)
vif
vif(lm(ECV_OB ~ AdultBodyMass * (log(SeT) + log(SeP)))
)
vif(lm(ECV_OB ~ AdultBodyMass * (log(SeT) + log(SeP))), data=lep.data)
vif(lm(ECV_OB ~ AdultBodyMass * (log(SeT) + log(SeP)), data=lep.data)
)
vif(lm(ECV_OB ~ AdultBodyMass * (log(SeT) + log(SeP)), data=lep.data))
vif(lm(ECV_OB ~ AdultBodyMass * log(SeT) + log(SeP), data=lep.data))
vif(lm(ECV_OB ~ AdultBodyMass * log(SeP), data=lep.data))
vif(lm(ECV_OB ~ AdultBodyMass + log(SeP), data=lep.data))
vif(lm(ECV_OB ~ AdultBodyMass * log(SeP), data=lep.data))
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SeT), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(Sep), data = leporid, lambda='ML')
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(Sep), data = leporid, lambda='ML')
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SepP, data = leporid, lambda='ML')
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + log(SeP), data = leporid, lambda='ML')
anova(model.Se1)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + log(SeP), data = leporid, lambda='ML')
anova(model.Se1)
plot(lep.data$AdultBodyMass)
hist(lep.data$AdultBodyMass)
lep.data <-read.table("./Data/lepdata_trimmed2.txt", sep = "\t", header = TRUE)
lep.tree <-read.tree("./Data/leptree.txt")
#convert var types
lep.data$DietBreadth <- as.numeric(lep.data$DietBreadth)
lep.data$Burrow < as.numeric(lep.data$DietBurrow)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
lep.data$ECV_T <- log(lep.data$ECV_T)
lep.data$ECV_OB <- log(lep.data$ECV_OB)
lep.data$ECV_ROB <- log(lep.data$ECV_ROB)
lep.data$AdultBodyMass <- log(lep.data$AdultBodyMass)
lep.data$GestationLen <- log(lep.data$GestationLen)
lep.data$HomeRange <- log(lep.data$HomeRange)
lep.data$LitterSize <- log(lep.data$LitterSize)
lep.data$GR_Area <- log(lep.data$GR_Area)
lep.data$SeP <- log(lep.data$SeP)
lep.data$SeP <- log(lep.data$SeT)
lep.data$ECV_T <- stdize(lep.data$ECV_T)
lep.data$ECV_OB <- stdize(lep.data$ECV_OB)
lep.data$ECV_ROB <- stdize(lep.data$ECV_ROB)
lep.data$AdultBodyMass <- stdize(lep.data$AdultBodyMass)
lep.data$GestationLen <- stdize(lep.data$GestationLen)
lep.data$HomeRange <- stdize(lep.data$HomeRange)
lep.data$LitterSize <- stdize(lep.data$LitterSize)
lep.data$GR_Area <- stdize(lep.data$GR_Area)
lep.data$SeP <- stdize(lep.data$SeP)
lep.data$SeP <- stdize(lep.data$SeT)
#set row names and check for missingness
rownames(lep.data) <- lep.data$Name_phyl
clean.data(lep.data, lep.tree)  ## check if data == tree names
leporid <- comparative.data(phy = lep.tree, data = lep.data, names.col = Name_phyl, vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1)
model.Se2<-pgls(ECV_OB ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
anova(model.Se2)
model.Se1<-pgls(ECV_T ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1T)
model.Se1<-pgls(ECV_OB ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1)
model.Se2<-pgls(ECV_OB ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
anova(model.Se2)
model.Se1T<-pgls(ECV_T ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1T)
model.Se2T<-pgls(ECV_T ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
anova(model.Se2T)
model.Se1T<-pgls(ECV_ROB ~ AdultBodyMass + SeP, data = leporid, lambda='ML')
anova(model.Se1T)
model.Se2T<-pgls(ECV_ROB ~ AdultBodyMass + SeT, data = leporid, lambda='ML')
anova(model.Se2T)
model.Dev1<-pgls(ECV_OB ~ AdultBodyMass + LitterSize + GestationLen, data = leporid, lambda='ML')
lep.data <-read.table("./Data/lepdata_trimmed2.txt", sep = "\t", header = TRUE)
lep.data$ECV_T <- log(lep.data$ECV_T)
lep.data$ECV_OB <- log(lep.data$ECV_OB)
lep.data$ECV_ROB <- log(lep.data$ECV_ROB)
lep.data$AdultBodyMass <- log(lep.data$AdultBodyMass)
lep.data$GestationLen <- log(lep.data$GestationLen)
lep.data$HomeRange <- log(lep.data$HomeRange)
lep.data$LitterSize <- log(lep.data$LitterSize)
lep.data$GR_Area <- log(lep.data$GR_Area)
lep.data$SeP <- log(lep.data$SeP)
lep.data$SeP <- log(lep.data$SeT)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
