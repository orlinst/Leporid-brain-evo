color="#b2b2b2",
size=1.5) +
geom_dumbbell (color="light blue",
size_x=3.5,
size_xend = 3.5,
colour_x="#edae52",
colour_xend = "#9fb059") +
labs(x=NULL, y=NULL,
title="Dumbbell Chart",
subtitle="Dev model") +
geom_text(color="black", size=2, hjust=-0.5,
aes(x=Qmbar, label=Qmbar))
p <- ggplot(
res.plot,
aes(x = Qmbar, y = row.names(res.plot), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = row.names(res.plot), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light() +
scale_x_discrete(limits = rev(levels(row.names(res.plot))))
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = row.names(res.plot), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light() +
scale_y_discrete(limits = rev(levels(row.names(res.plot))))
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = rev (row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = rev (row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = scale_x_discrete(limits = rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
p <- ggplot(
res.plot,
aes(x = Qmbar, y = scale_x_discrete(limits = rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = rev(row.names(res.plot))) +
geom_errorbarh(aes(color = rev(row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
p <- ggplot(
res.plot,
aes(x = Qmbar, y = fct_rev(as_factor(row.names(res.plot))) , xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
p <- ggplot(
res.plot,
aes(x = Qmbar, y = scale_y_discrete(limits = rev(unique(sort(row.names(res.plot)))), xmin = Qmbar - SE, xmax = Qmbar + SE)
) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
p <- ggplot(
res.plot,
aes(x = Qmbar, y = scale_y_discrete(limits = rev(unique(sort(row.names(res.plot)))), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p <- ggplot(
res.plot,
aes(x = Qmbar, y = scale_y_discrete(limits = rev(unique(sort(row.names(res.plot)))), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
?fct_rev
library(forcats)
p <- ggplot(
res.plot,
aes(x = Qmbar, y = fct_rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
data <- read.csv("marsALL.txt", sep = "\t", header = TRUE)
tree <-read.tree("tree176.nwk")
rownames(data) <- data$Names
data$Order <- as.factor(data$Order)
data$Family <- as.factor(data$Family)
data$Origin <- as.factor(data$Origin)
data$Status <- as.factor(data$Status)
data$GeoArea <- as.factor(data$GeoArea)
data$DiurnalityN <- as.factor(data$DiurnalityN)
data$Arboreality <- as.factor(data$Arboreality)
data$Shelter.safety <- as.factor(data$Shelter.safety)
data$Diet <- as.factor(data$Diet)
data$Group.living <- as.factor(data$Group.living)
data$Parental.care <- as.factor(data$Parental.care)
data$Mating.system <- as.factor(data$Mating.system)
data$Torpor <- as.factor(data$Torpor)
data$Play <- as.factor(data$Play)
data_mice <- data
data_mice$Names <- NULL
data_mice$Species <- NULL
data_mice$Order <- NULL
data_mice$Family <- NULL
data_mice$Common.Name <- NULL
data_mice$GeoArea <- NULL
data_mice$Status..Endangered..Vulnerable..Common..Abundant..Rare..or.sparse...Declining..Limited. <- NULL
data_mice$Dimorphism <- NULL
data_mice$ased <- NULL
data_mice$BodyM <- NULL
data_mice$BodyF <- NULL
data_mice$BodyN <- log(data_mice$BodyN)
data_mice$Brain <- log(data_mice$Brain)
data_mice$Weaning.age <- log(data_mice$Weaning.age)
data_mice$Litter.size <- log (data_mice$Litter.size)
data_mice$HR <- log(data_mice$HR)
data_mice$Population.density <- log(data_mice$Population.density)
data_mice$FMR.Riek <- log (data_mice$FMR.Riek)
imp2 <- mice(data_mice, meth = c("phpmm", "phpmm", "", "", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm","phpmm","phpmm","phpmm", "phpmm", "phpmm"), psi = prec$psi, psiinv = prec$psiinv, maxit = 10)
plot(imp2)
stripplot(imp2, pch = 20, cex = 1.2)
stdize = stdize = function(x, ...) {(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
data_mice$Brain <- stdize(data_mice$Brain, na.rm = T)
data_mice$BodyN <- stdize(data_mice$BodyN, na.rm = T)
data_mice$Weaning.age <- stdize(data_mice$Weaning.age, na.rm = T)
data_mice$Litter.size <- stdize(data_mice$Litter.size, na.rm = T)
data_mice$HR <- stdize(data_mice$HR, na.rm = T)
data_mice$Population.density <- stdize(data_mice$Population.density, na.rm = T)
data_mice$FMR.Riek <- stdize(data_mice$FMR.Riek, na.rm = T)
imp2 <- mice(data_mice, meth = c("phpmm", "phpmm", "", "", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm", "phpmm","phpmm","phpmm","phpmm", "phpmm", "phpmm"), psi = prec$psi, psiinv = prec$psiinv, maxit = 5)
stripplot(imp2, pch = 20, cex = 1.2)
tTable
res.plot
res.plot$WaldT <- NULL
res.plot$df <- NULL
res.plot$p <- NULL
res.plot$lowerCI <- NULL
res.plot$upperCI <- NULL
res.plot
posterior <- as.array(res.plot)
res.plot
mcmc_intervals(tTable)
res.plot <- as.data.frame(t(res.plot))
mcmc_intervals(tTable)
mcmc_intervals(res.plot)
color_scheme_set("red")
mcmc_intervals(res.plot)
mcmc_areas(
res.plot,
pars = c("cyl", "drat", "am", "sigma"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_areas(
res.plot,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
?mcmc_areas
mcmc_violin(res.plot)
mcmc_dens(res.plot)
mcmc_dens(mcmc_hist)
?mcmc_areas
mcmc_intervals(res.plot)
res.plot
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
res.plot <- as.data.frame(tTable)
res.plot <- as.data.frame(t(res.plot))
res.plot
mcmc_intervals(res.plot)
mcmc_areas(
res.plot,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
res.plot
mcmc_intervals_data(res.plot)
mcmc_intervals_areas(res.plot)
mcmc_areas_data(res.plot)
mcmc_intervals_data(res.plot, point_est = "mean")
mcmc_intervals(res.plot, point_est = "mean")
mcmc_areas(res.plot, point_est = "mean")
one_model$Sol
posterior <- as.array(one_model$Sol)
mcmc_areas(
posterior,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_areas_ridges(
posterior,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
sumsol1
sumsol2
sumsol
one_model$Sol
mcmc_hist(tTable)
color_scheme_set("red")
mcmc_intervals(tTable)
color_scheme_set("red")
mcmc_intervals(res.plot)
?mcmc_areas
mcmc_intervals(re.plot)
mcmc_intervals(res.plot)
res.plot
res.plot
res.plot <- as.data.frame(tTable)
res.plot$upperCI <- NULL
res.plot$lowerCI <- NULL
res.plot$p <- NULL
res.plot$df <- NULL
res.plot$WaldT <- NULL
color_scheme_set("red")
mcmc_intervals(res.plot)
res.plot <- as.data.frame(t(res.plot)
)
color_scheme_set("red")
mcmc_intervals(res.plot)
mcmc_hist(res.plot)
ggplot(res.plot, aes(x=Qmbar, xend = (Qmbar + SE), y=row.names(res.plot))) +
geom_segment(aes(x=Qmbar,
xend = Qmbar + SE,
y=row.names(res.plot),
yend=row.names(res.plot)),
color="#b2b2b2",
size=1.5) +
geom_dumbbell (color="light blue",
size_x=3.5,
size_xend = 3.5,
colour_x="#edae52",
colour_xend = "#9fb059") +
labs(x=NULL, y=NULL,
title="Dumbbell Chart",
subtitle="Dev model") +
geom_text(color="black", size=2, hjust=-0.5,
aes(x=Qmbar, label=Qmbar))
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
res.plot <- as.data.frame(t(res.plot))
ggplot(res.plot, aes(x=Qmbar, xend = (Qmbar + SE), y=row.names(res.plot))) +
geom_segment(aes(x=Qmbar,
xend = Qmbar + SE,
y=row.names(res.plot),
yend=row.names(res.plot)),
color="#b2b2b2",
size=1.5) +
geom_dumbbell (color="light blue",
size_x=3.5,
size_xend = 3.5,
colour_x="#edae52",
colour_xend = "#9fb059") +
labs(x=NULL, y=NULL,
title="Dumbbell Chart",
subtitle="Dev model") +
geom_text(color="black", size=2, hjust=-0.5,
aes(x=Qmbar, label=Qmbar))
p <- ggplot(
res.plot,
aes(x = Qmbar, y = fct_rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
res.plot <- as.data.frame(t(res.plot))
color_scheme_set("red")
mcmc_intervals(res.plot, pch = 20)
color_scheme_set("red",pch = 20  )
mcmc_intervals(res.plot)
color_scheme_set("red",pch = 20)
color_scheme_view(red)
color_scheme_view("red")
pch = 20
color_scheme_view("blue")
color_scheme_set("blue")
mcmc_intervals(res.plot)
??mcmc_areas
mcmc_areas_data(res.plot)
mcmc_areas_data(sol)
p <- ggplot(
res.plot,
aes(x = Qmbar, y = fct_rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
res.plot <- as.data.frame(t(res.plot))
p <- ggplot(
res.plot,
aes(x = Qmbar, y = fct_rev(row.names(res.plot)), xmin = Qmbar - SE, xmax = Qmbar + SE)) +
geom_point(aes(color = row.names(res.plot))) +
geom_errorbarh(aes(color = row.names(res.plot)), height=0.05)+
theme_light()
p$labels$colour <- "Model"
p$labels$x <- "Posterior estimate + SE"
p$labels$y <- "Model parameters"
p
color_scheme_set("red")
mcmc_intervals(t(res.plot), pch = 20)
mcmc_intervals(t(res.plot))
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
res.plot <- as.data.frame(tTable)
color_scheme_set("red")
mcmc_intervals(t(res.plot))
res.plot$upperCI <- NULL
res.plot$lowerCI <- NULL
res.plot$p <- NULL
res.plot$df <- NULL
res.plot$WaldT <- NULL
color_scheme_set("red")
mcmc_intervals(t(res.plot))
color_scheme_set("red")
mcmc_intervals(t(res.plot))
mcmc_areas(
res.plot,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_areas(
t(res.plot),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_areas(
t(res.plot),
prob = 0.9, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "median"
)
setwd("C:/Users/uqotodor_local/Dropbox/05. Github/Leporid-brain-evo/Data")
lep.data <-read.table("lepdata_trimmed2.txt", sep = "\t", header = TRUE)
## then use the ggextra add-in to convert var types
lep.tree <-read.tree("leptree.txt")
rownames(lep.data) <- lep.data$Name_phyl
data <- lep.data
tree <- lep.tree
View(data)
formulaL <- ECV_OB ~ SeT*SeP*AdultBodyMass
data$ECV_OB <- log (data$ECV_OB)
data$AdultBodyMass <- log (data$AdultBodyMass)
data$ECV_T <- log (data$ECV_T)
mulTree_dataL <- as.mulTree(data = data, tree = tree,
taxa = "Name_phyl")
mul_formula <- formulaL
mulTree(mulTree.data = mulTree_dataL, formula = mul_formula, priors = mul_priors,
parameters = mul_parameters, output = "modelL", ESS = 1000,
chains = 2)
if(!require(ape)) install.packages("ape")
if(!require(caper)) install.packages("caper")
if(!require(MCMCglmm)) install.packages("MCMCglmm")
require(phytools)
tree$edge.length[which(tree$edge.length == 0)] <- 0.01*median(tree$edge.length[-which(tree$edge.length == 0)])
tree <- force.ultrametric(tree,method="extend")
mulTree(mulTree.data = mulTree_dataL, formula = mul_formula, priors = mul_priors,
parameters = mul_parameters, output = "modelL", ESS = 1000,
chains = 2)
require(phytools)
tree$edge.length[which(tree$edge.length == 0)] <- 0.01*median(tree$edge.length[-which(tree$edge.length == 0)])
tree <- force.ultrametric(tree,method="extend")
mulTree_dataL <- as.mulTree(data = data1, tree = tree,
taxa = "Names")
mulTree(mulTree.data = mulTree_dataL, formula = mul_formula, priors = mul_priors,
parameters = mul_parameters, output = "model1", ESS = 1000,
chains = 2)
mul_formula <- formulaL
# The MCMC parameters (iterations, thining, burnin)
mul_parameters <- c(nitt, thin, burnin)
# The MCMCglmm priors
mul_priors <- list(R = list(V = 1, nu = 0.002),
G = list(G1 = list(V = 1, nu = 0.002)))
mulTree_data1 <- as.mulTree(data = data, tree = tree,
taxa = "Name_phyl")
mulTree(mulTree.data = mulTree_dataL, formula = mul_formula, priors = mul_priors,
parameters = mul_parameters, output = "model1", ESS = 1000,
chains = 2)
mulTree(mulTree.data = mulTree_dataL, formula = ECV_OB ~ SeT * SeP * AdultBodyMass, priors = mul_priors,
parameters = mul_parameters, output = "model1", ESS = 1000,
chains = 2)
View(data)
mulTree_dataL <- as.mulTree(data = data, tree = tree,
taxa = "Name_phyl")
# The formula
mul_formula <- formulaL
# The MCMC parameters (iterations, thining, burnin)
mul_parameters <- c(nitt, thin, burnin)
# The MCMCglmm priors
mul_priors <- list(R = list(V = 1, nu = 0.002),
G = list(G1 = list(V = 1, nu = 0.002)))
mulTree(mulTree.data = mulTree_dataL, formula = formulaL, priors = mul_priors,
parameters = mul_parameters, output = "modelL", ESS = 1000,
chains = 2)
one_model1 <- read.mulTree("modelL-tree1_chain1", model = TRUE)
plot(pne_model1)
plot(one_model1)
plot(one_model1)
plot(one_model1)
plot(pne_model1)
plot(one_model1)
posterior <- as.array(one_model1$Sol)
mcmc_areas(
posterior,
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
mcmc_hist(posterior)
mcmc_intervals(posterior)
one_model1$Sol
summary(one_model1$Sol)
summary(one_model1$Sol)
plot(one_model1)
summary(one_model1)
summary(one_model1)
